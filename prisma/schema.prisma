// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  isVerifed Boolean @default(false)
  reservations Reservation[]
}

enum Role {
  USER
  ADMIN
}

model Movie {
  id          String     @id @default(uuid())
  title       String
  description String
  posterUrl   String
  genre       Genre @relation(fields: [genreId], references: [id])
  genreId     String
  showtimes   Showtime[]
  createdAt   DateTime   @default(now())
}

model Genre {
  id     String   @id @default(uuid())
  name   String   @unique
  movies Movie[] 
}

model Showtime {
  id        String   @id @default(uuid())
  movie     Movie    @relation(fields: [movieId], references: [id])
  movieId   String
  startTime DateTime
  capacity  Int
  createdAt DateTime @default(now())
  seats     Seat[]
}

model Seat{
  id        String   @id @default(uuid())
  showtime  Showtime @relation(fields: [showtimeId], references: [id])
  showtimeId String
  number    Int
  isBooked  Boolean @default(false)
  reservationId String?
  reservation Reservation? @relation(fields: [reservationId], references: [id])
}

model Reservation{
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  seat      Seat []
  createdAt DateTime @default(now())
  canceledAt DateTime?
}
